name: Test model speed
on:
  push:
    paths:
      - '**'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ['camera2']
        
    env:
      EXREPO: test-acap
      EXNAME: larod-test
      EAPNAME: larod_test
      EXDIR: acap/examples/$EXNAME
    steps:
      - uses: actions/checkout@v3

      - name: Get the architecture from the camera
        run: |
          ok=$(curl -s --noproxy '*' --anyauth -u root:"WRD6ycy*agd2akt4zjr" -k --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0", "method":"getProperties", "params": {"propertyList": ["Architecture"]}}' http://85.235.16.137:8012/${{matrix.arch}}/axis-cgi/basicdeviceinfo.cgi)
          echo  "response from curl= $ok" 
          ok=${ok#*Architecture}
          echo "test=$(echo $ok | cut -d '"' -f 3)" >> $GITHUB_ENV
          echo ok=$(echo $ok | cut -d '"' -f 3)
      - name: Test the env variable  
        id: grabInfoId
        run: | 
          echo $test     

      - name: Build ${{ env.example }} application
        env:
          example: ${{ env.EXNAME }}
          imagetag: ${{ env.EXREPO }}_${{ env.EXNAME }}:1.0
          EXNAME: larod-test
          test: ${{env.test}}
        run: |
          cd Scripts/testing-acap/$EXNAME
          echo $test 
          echo ARCH=$test
          docker image rm -f $imagetag
          docker build --no-cache --tag $imagetag --build-arg ARCH=$test .
          docker cp $(docker create $imagetag):/opt/app ./build
          myimg=$(docker images | awk '{print $1}' | awk 'NR==2')
          echo $myimg
          docker ps  -a --format 'CONTAINER ID : {{.ID}} | Name: {{.Names}} | Image:  {{.Image}} '        
          echo "here what the build file contains"
          ls build

      - name: upload the app to the camera
        env: 
          test: ${{env.test}}
          eapfile: ${{ env.EAPNAME }}_1_0_0_all.eap
        run: |
          echo ${test}
          echo $eapfile
          cd Scripts/testing-acap/$EXNAME/build
          ls
          upload=$(curl --noproxy  '*' --anyauth -s -S -k -F packfil=@${eapfile} -u root:"WRD6ycy*agd2akt4zjr" "http://85.235.16.137:8012/${{matrix.arch}}/axis-cgi/admin/applications/upload.cgi?reload_page=yes")
          echo $upload
          echo "time to refresh the page"
          sleep 20

      - name: start the application
        run: |
          curl -s -v -u root:"WRD6ycy*agd2akt4zjr" "http://85.235.16.137:8012/camera2/axis-cgi/applications/control.cgi?action=start&package=$EAPNAME"
          while true; do
            curl -s --noproxy '*' --anyauth -u root:"WRD6ycy*agd2akt4zjr" -k --header "Content-Type: application/json" http://85.235.16.137:8012/camera2/axis-cgi/admin/systemlog.cgi?appname=$EAPNAME
            if [[ "$?" == *"Done"* ]]; then
              result = $?
              echo "output: "
              echo $result
              break
            fi
            sleep 10
          done


      - name: Stop the application
        run: | 
          curl -v --noproxy '*' --anyauth -u root:"WRD6ycy*agd2akt4zjr" "http://85.235.16.137:8012/camera2/axis-cgi/applications/control.cgi?action=stop&package=$EAPNAME"
          echo "Please refresh hemsida, so you can see the application status is stopped"  
          echo "time to refresh the page"
          for i in {1..8} 
          do
            sleep 1
            echo "$i"
          done
  
      - name: remove the application
        run: |
          curl -s -v --noproxy '*' -k --anyauth -u root:"WRD6ycy*agd2akt4zjr" --header "Content-Type: application/json" --request POST --data '{"apiVersion":"1.0", "method":"getAllProperties"}' "http://85.235.16.137:8012/camera2/axis-cgi/applications/control.cgi?action=remove&package=$EAPNAME"
    
    
          
